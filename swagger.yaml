openapi: 3.0.0
info:
  title: Ethos - Microsservices
  description: API para gerenciar empresas, serviços, portfólios, avaliações e newsletters
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local

tags:
  - name: Autenticação
  - name: Empresas
  - name: Prestadoras
  - name: Serviços
  - name: Newsletters
  - name: Portfólio

paths:
  /auth/login:
    post:
      summary: Login do usuário
      tags:
      - Autenticação
      requestBody:
        description: Credenciais do usuário para autenticação.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Autenticação bem-sucedida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciais inválidas.
  /v1.0/empresas:
    post:
      summary: Criar nova empresa
      tags:
        - Empresas
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      requestBody:
        description: Dados da nova empresa.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmpresaInput'
      responses:
        '201':
          description: Empresa criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmpresaResponse'

    get:
      summary: Listar empresas
      tags:
        - Empresas
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      responses:
        '200':
          description: Lista de empresas obtida com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmpresaResponse'

  /v1.0/empresas/{id}:
    get:
      summary: Obter detalhes de uma empresa
      tags:
        - Empresas
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da empresa
          required: true
      responses:
        '200':
          description: Detalhes da empresa obtidos com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmpresaResponse'
        '404':
          description: Empresa não encontrada.
  /v1.0/prestadoras:
    post:
      summary: Criar nova prestadora
      tags:
        - Prestadoras
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      requestBody:
        description: Dados da nova prestadora.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrestadoraInput'
      responses:
        '201':
          description: Prestadora criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrestadoraResponse'

    get:
      summary: Listar prestadoras
      tags: 
        - Prestadoras
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: statusAprovacao
          in: query
          schema:
            type: string
            enum: [APROVADO, REPROVADO, PENDENTE]
          description: Filtrar prestadoras por status de aprovação.
      responses:
        '200':
          description: Lista de prestadoras obtida com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrestadoraResponse'

  /v1.0/prestadoras/{id}:
    get:
      summary: Obter detalhes de uma prestadora
      tags:
        - Prestadoras
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da prestadora
          required: true
      responses:
        '200':
          description: Detalhes da prestadora obtidos com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrestadoraResponse'
        '404':
          description: Prestadora não encontrada.

    put:
      summary: Atualizar uma prestadora
      tags:
        - Prestadoras
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da prestadora
          required: true
      requestBody:
        description: Dados atualizados da prestadora.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrestadoraInput'
      responses:
        '200':
          description: Prestadora atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrestadoraResponse'
        '404':
          description: Prestadora não encontrada.

    delete:
      summary: Deletar uma prestadora
      tags:
        - Prestadoras
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da prestadora
          required: true
      responses:
        204:
          description: Prestadora deletada com sucesso.
        404:
          description: Prestadora não encontrada.

  /v1.0/servicos:
    post:
      summary: Cria um serviço
      tags:
        - Serviços
      security:
        - bearerAuth: []
      requestBody:
        description: Dados do novo serviços
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicoInput'
      responses:
        '200':
          description: Serviço criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
        '400':
          description: Dados inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
    get:
      summary: Busca todos os serviços
      tags: 
        - Serviços
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de serviços resgatados com sucesso.
          content:
            application/json:
              schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ServicoResponse'
                      
  /v1.0/servicos/{id}:
    get:
      summary: Busca um serviço através de um id 
      tags:
        - Serviços
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador de serviço
          required: true
      responses:
        '200':
          description: Serviço retornado com sucesso.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServicoResponse'
        '404':
          description: Serviço não encontrado.
          content:
            application/json:
              schema:
                items: 
                  $ref: '#/components/schemas/ServicoResponse'
    put:
      summary: Atualiza um serviço através do id.
      tags:
        - Serviços
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador de serviço
          required: true
      requestBody:
          description: Dados a serem atualizados 
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoInput'
      responses:
        '200':
          description: Serviço atualizado com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicoResponse'
        '404':
          description: Serviço não encontrado.
          content:
              application/json:
                schema:
                  items: 
                    $ref: '#/components/schemas/ServicoResponse'
    delete:
      summary: deleta serviço por id.
      tags:
        - Serviços
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador do serviço
          required: true
      responses:
        '204':
          description: Serviço deletado com sucesso.

  /v1.0/servicos/busca-por-nome:
    get:
      summary: Busca serviço por nome.
      tags:
        - Serviços
      security:
        - bearerAuth: []
      parameters:
        - name: nome
          in: query
          schema:
            type: string
          description: nome do serviço
          required: true
      responses:
        '200':
          description: Dados do serviço retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
        '404':
          description: Nome não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
  /v1.0/servicos/busca-por-descricao:
    get:
      summary: Busca serviço por descrição.
      tags:
        - Serviços
      security:
        - bearerAuth: []
      parameters:
        - name: descricao
          in: query
          schema:
            type: string
          description: descrição do serviço
          required: true
      responses:
        '200':
          description: dados do serviço retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
        '404':
          description: descrição não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
  /v1.0/servicos/busca-por-valor:
    get:
      summary: Busca serviço por valor.
      tags:
        - Serviços
      security:
        - bearerAuth: []
      parameters:
        - name: valor
          in: query
          schema:
            type: string
          description: valor do serviço
          required: true
      responses:
        '200':
          description: Dados do serviço retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
        '404':
          description: valor não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
  /v1.0/servicos/busca-area-atuacao:
    get:
      summary: Busca serviço por área de atuação.
      tags:
        - Serviços
      security:
        - bearerAuth: []
      parameters:
        - name: areaAtuacaoEsg
          in: query
          schema:
            type: array
          description: área de atuação do serviço
          required: true
      responses:
        '200':
          description: Dados do serviço retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
        '404':
          description: área de atuação não encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
  /v1.0/servicos/fila-exibicao-curtidas:
    get:
      summary: Exibe uma fila de curtidas daquele serviço.
      tags:
        - Serviços
      security:
        - bearerAuth: []
      requestBody:
        description: Dados do serviço.
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ServicoResponse'
      responses:
        '200':
          description: Dados do serviço retornado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
        '404':
          description: área de atuação não encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicoResponse'
    # Defina operações para o microsserviço de serviços aqui
    # ...

  /newsletter:
    post:
      summary: Criar nova newsletter
      tags:
        - Newsletters
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      requestBody:
        description: Dados da nova newsletter.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsletterInput'
      responses:
        '201':
          description: Newsletter criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsletterResponse'

    get:
      summary: Listar newsletters
      tags:
        - Newsletters
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      responses:
        '200':
          description: Lista de newsletters obtida com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsletterResponse'

  /newsletter/{id}:
    get:
      summary: Obter detalhes de uma newsletter
      tags:
        - Newsletters
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da newsletter
          required: true
      responses:
        '200':
          description: Detalhes da newsletter obtidos com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsletterResponse'
        '404':
          description: Newsletter não encontrada.

    put:
      summary: Atualizar uma newsletter
      tags:
        - Newsletters
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da newsletter
          required: true
      requestBody:
        description: Dados atualizados da newsletter.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsletterInput'
      responses:
        '200':
          description: Newsletter atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsletterResponse'
        '404':
          description: Newsletter não encontrada.

    delete:
      summary: Deletar uma newsletter
      tags:
        - Newsletters
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da newsletter
          required: true
      responses:
        '204':
          description: Newsletter deletada com sucesso.
        '404':
          description: Newsletter não encontrada.

  /v1.0/empresas/assinante:
    get:
      summary: Consulta empresas assinantes
      tags:
        - Empresas
      security:
        - bearerAuth: []  # Autenticação JWT necessária
      parameters:
        - name: assinanteNewsletter
          in: query
          schema:
            type: boolean
          description: Filtrar empresas por assinante do newsletter.
      responses:
        '200':
          description: Lista de empresas assinantes obtida com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmpresaResponse'
  /v1.0/empresas/gerarTxt:
    post:
      summary: Gera um arquivo txt das empresas cadastradas
      tags:
        - Empresas
      security:
        - bearerAuth: [ ] #Autenticação SWT necessáriam
      responses:
        '200':
          description: Arquivo extensão .txt criada com sucesso.
  /v1.0/portfolios:
    post:
      tags:
        - Portfólio
      requestBody:
          description: Dados do novo portfolio
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioInput'
      responses:
        '201':
          description: Portfolio criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioResponse'
    get:
      summary: busca todos os portfólios cadastrados
      tags:
        - Portfólio
      responses:
        '200':
          description: lista de portfólios obtidas com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortfolioResponse'
  /v1.0/portfolios/{id}:              
    get:
      summary: busca portfólios cadastrados por ID
      tags:
        - Portfólio
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da empresa
          required: true 
      responses:
        '200':
          description: lista de portfólios obtidas com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortfolioResponse'
        '404':
          description: portfolio não encontrado.  
    put:
      summary: atualiza portfólio pelo ID
      tags:
        - Portfólio
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          description: identificador da empresa.
          required: true
      requestBody:
          description: Dados do novo portfolio
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioInput'
      responses:
        '200':
          description: portfólio atualizado com sucesso.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/PortfolioResponse'
        '404':
          description: portfólio não encontrado.
    delete:
      summary: deleta portfolio por ID.
      tags:
        - Portfólio
      parameters:
        - name: id
          in: path
          schema: 
            type: string
            format: uuid
          description: identificador de portfólio.
          required: true
      responses:
        '204':
          description: portfólio deletado com sucesso.
  /v1.0/avaliacoes:
    post:
      tags:
        - Avaliação
      requestBody:
          description: Dados da nova avaliação
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvaliacaoInput'
      responses:
        '201':
          description: Avaliação criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvaliacaoResponse'
    get:
      tags:
        - Avaliação
      parameters:
        - name: comentario
          in: query
          schema:
            type: string
          description: buscar por um comentario
        - name: nota
          in: query
          schema:
            type: integer
          description: buscar por uma nota
        - name: fkEmpresa
          in: query
          schema:
            type: string
            format: uuid
          description: buscar pelo id da empresa
        - name: fkServico
          in: query
          schema:
            type: string
            format: uuid
          description: buscar pelo id do serviço
      responses:
        '200':
          description: lista de avaliações obtidas com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvaliacaoResponse'
  /v1.0/avaliacoes/{id}:
    get:
      tags:
        - Avaliação
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: busca avaliação por id 
      responses:
        '200':
          description: avaliação por id obtida com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvaliacaoResponse'
    put:
      tags:
        - Avaliação
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          required: true
          description: identificador da avaliação
      requestBody:
          description: Dados da nova avaliação
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvaliacaoInput'
      responses:
        '200':
          description: Atualização da avaliação realizada corretamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvaliacaoResponse'
    delete:
      tags:
        - Avaliação
      parameters:
      - name: id
        in: path
        schema:
          type: string
          format: uuid
        required: true
        description: identificador da avaliação
      responses:
        '204':
          description: Avaliação deletada com sucesso
  /v1.0/avaliacoes/historico:
    post:
      tags:
        - Avaliação
      responses:
        '202':
          description: lista de avaliação gerada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvaliacaoResponse'
  /v1.0/avaliacoes/data:
    get:
      tags:
        - Avaliação
      parameters:
      - name: data
        in: query
        schema:
          type: string
        required: true
      responses:
        '200':
          description: lista de avaliações ordenadas pela data gerada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvaliacaoResponse'



    
                
                
components:
  schemas:
    EmpresaInput:
      properties:
        razaoSocial:
          type: string
          example: Minha Empresa
        cnpj:
          type: string
          example: 78159752000197
        telefone:
          type: string
          example: 11964785123
        email:
          type: string
          example: email@email.com
        senha:
          type: string
          example: Senha123
        setor:
          type: string
          example: tecnologia
        qtdFuncionarios:
          type: integer
          example: 100
        assinanteNewsletter:
          type: boolean
          example: true

    EmpresaResponse:
      properties:
        id:
          type: string
          format: uuid
          description: ID da empresa
        razaoSocial:
          type: string
          example: Minha Empresa
        cnpj:
          type: string
          example: 78159752000197
        telefone:
          type: string
          example: 11964785123
        email:
          type: string
          example: email@email.com
        senha:
          type: string
          example: Senha123
        setor:
          type: string
          example: tecnologia
        qtdFuncionarios:
          type: integer
          example: 100
        assinanteNewsletter:
          type: boolean
          example: true

    NewsletterInput:
      properties:
        titulo:
          type: string
          example: Título da Newsletter
        conteudo:
          type: string
          example: Conteúdo da Newsletter

    NewsletterResponse:
      properties:
        id:
          type: string
          format: uuid
          description: ID da newsletter
        titulo:
          type: string
          example: Título da Newsletter
        conteudo:
          type: string
          example: Conteúdo da Newsletter

    LoginInput:
      properties:
        email:
          type: string
          format: email
          example: usuario@example.com
        password:
          type: string
          format: password
          example: senha123

    LoginResponse:
      properties:
        token:
          type: string
          description: Token JWT para autenticação.
          
    ServicoInput:
      properties:
        nomeServico:
          type: string
          example: Exemplo
        descricao:
          type: string
          example: Este é um serviço de Exemplo
        valor:
          type: number
          example: 0.0
        areaAtuacaoEsg:
            type: array
            example: [ENVIRONMENTAL, SOCIAL, GOVERNANCE]
        fkPrestadoraServico:
            type: string
            format: uuid
            example: id da prestadora do serviço.
      
    ServicoResponse:
        properties:
          id:
            type: string
            format: uuid
            example: ID do serviço.
          nomeServico:
            type: string
            example: Exemplo
          descricao:
            type: string
            example: Este é um serviço de Exemplo
          valor:
            type: number
            example: 0.0
          areaAtuacaoEsg:
            type: array
            example: [ENVIRONMENTAL, SOCIAL, GOVERNANCE]
          fkPrestadoraServico:
            type: string
            format: uuid
            example: id da prestadora do serviço.

    PrestadoraInput:
      properties:
        idEmpresa:
          type: string
          format: uuid
          example: ID da empresa.
        statusAprovacao:
          type: string
          enum: [APROVADO, REPROVADO, PENDENTE]
          example: APROVADO

    PrestadoraResponse:
      properties:
        idPrestadora:
          type: string
          format: uuid
          example: ID da prestadora.
        statusAprovacao:
          type: string
          enum: [APROVADO, REPROVADO, PENDENTE]
          example: APROVADO
        fkEmpresa:
          type: string
          format: uuid
          example: ID da empresa associada à prestadora.

    PortfolioInput:
      properties:
        urlImagemPerfil:
          type: string
          example: imagem_teste.jpeg
        urlBackgroundPerfil:
          type: string
          example: imagem_background_teste.jpeg
        descricaoEmpresa:
          type: string
          example: Descrição empresas
        sobreEmpresa:
          type: string
          example: empresa...
        linkWebsiteEmpresa:
          type: string
          example: www.empresaWebSite.com
        dataEmpresaCertificada:
          type: string
          example: 2023-01-01
        fkPrestadoraServico:
          type: string
          example: UUID

    PortfolioResponse:
      properties:
        id:
          type: string
          format: uuid
          description: ID da portifolio
        urlImagemPerfil:
          type: string
          example: Imagem_perfil.jpeg
        urlBackgroundPerfil:
          type: string
          example: imagem_background.jpeg
        descricaoEmpresa:
          type: string
          example: Descrição empresa
        sobreEmpresa:
          type: string
          example: empresa...
        linkWebsiteEmpresa:
          type: string
          example: www.empresaWebSite.com
        dataEmpresaCertificada:
          type: string
          example: 2023-01-01
        fkPrestadoraServico:
          type: string
          example: uuid
    
    AvaliacaoInput:
      properties:
        comentario:
          type: string
          example: Gostei muito desse serviço.
        nota:
          type: integer
          example: 1 a 5
        data:
          type: string
          example: 2023-01-01
        fkServico:
          type: string
          format: uuid
        fkEmpresa:
          type: string
          format: uuid

    AvaliacaoResponse:
      properties:
        comentario:
          type: string
          example: Gostei muito desse serviço.
        nota:
          type: integer
          example: 1 a 5
        data:
          type: string
          example: 2023-01-01
        fkServico:
          type: string
          format: uuid
        fkEmpresa:
          type: string
          format: uuid

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
